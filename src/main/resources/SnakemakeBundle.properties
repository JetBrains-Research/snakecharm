### Inspections: INSP ###
INSP.GROUP.snakemake=Snakemake

# SnakemakeResourcesUnnamedArgsInspection
INSP.NAME.resources.unnamed.args=Resources have to be named (e.g. 'threads=4').
INSP.INTN.name.argument=Name argument

# SnakemakeRuleRedeclarationInspection
INSP.NAME.rule.redeclaration=This rule name is already used by another rule declaration.
INSP.NAME.rule.redeclaration.possible=This rule name is probably used by another rule declaration. Not sure because this rule isn't at file top level.
INSP.NAME.rule.redeclaration.other.file.possible=This rule name is probably used by another rule declaration. Not sure because the usage is in the other file.
INSP.INTN.rename.element=Rename element

# SnakemakeRuleSectionAfterExecutionInspection
INSP.NAME.rule.section.after.execution=No rule sections allowed after execution sections.
INSP.NAME.rule.section.after.execution.message=Rule section ''{0}'' isn''t allowed after ''{1}'' section.
INSP.INTN.move.execution.section.down.family=Move execution section to the end of the rule

# SnakemakeShadowSettingsInspection
INSP.NAME.shadow.settings=Shadow must either be 'shallow', 'full', 'minimal', or True (equivalent to 'full').
INSP.NAME.shadow.settings.full=The setting shadow: \"full\" fully shadows the entire subdirectory structure of the current workdir.
INSP.NAME.shadow.settings.minimal=The setting shadow: \"minimal\" only symlinks the inputs to the rule.
INSP.NAME.shadow.settings.shallow=By setting shadow: \"shallow\", the top level files and directories are symlinked, so that any relative paths in a subdirectory will be real paths in the filesystem.

# SmkSectionRedeclarationInspectoin
INSP.NAME.section.redeclaration=Section declaration above overrides this declaration
INSP.NAME.section.redeclaration.message=Declaration of section ''{0}'' above overrides this declaration.
INSP.INTN.remove.section.family=Remove section

#SmkCondaSectionNotAllowedWithRun
INSP.NAME.conda.section.not.allowed.with.run=Conda environments are not allowed with run directive.

# SmkSectionMultilineStringArgsInspection.kt
INSP.NAME.section.multiline.string.args=Multiline section string argument
INSP.NAME.section.multiline.string.args.message=Multiline string argument in ''{0}'' will be considered as concatenation. Maybe comma is missing.

# SmkSectionMultipleArgsInspection
INSP.NAME.section.multiple.args=Only one argument is allowed for this section.
INSP.NAME.section.multiple.args.message=Only one argument is allowed for ''{0}'' section.

# SmkSectionUnspecifiedFieldArgsInspection
INSP.NAME.section.unspecified.field.args=Section name is not specified
INSP.NAME.section.unspecified.field.args.message=Expected section name or argument (e.g. ''rules.foo.input'' or ''rules.bar.output.arg1''), but ''{0}'' was found

# SmkSectionDuplicatedArgsInspection
INSP.NAME.section.duplicated.args=Duplicated argument
INSP.NAME.section.duplicated.args.message=This argument has been already added to ''{0}'' section.
INSP.INTN.remove.duplicated.arg=Remove duplicated argument

# SmkSectionWrapperArgsInspectoin
INSP.NAME.wrapper.args.missed=Missed wrapper argument
INSP.NAME.wrapper.args.missed.message=Argument ''{0}'' missed in ''{1}''
INSP.NAME.wrapper.args.section.missed.message=Section ''{0}'' with args ''{1}'' is missed

# SmkSectionUnexpectedCallableArgsInspection
INSP.NAME.section.unexpected.callable.args=Unexpected callable argument
INSP.NAME.section.unexpected.callable.args.message=Section ''{0}'' does not support callable arguments

# SmkSectionUnexpectedKeywordArgsInspection
INSP.NAME.section.unexpected.keyword.args=Unexpected keyword argument
INSP.NAME.section.unexpected.keyword.args.message=Section ''{0}'' does not support keyword arguments

# SmkSectionWrapperArgsInspectoin
INSP.NAME.wrapper.args.missed=Missed wrapper argument
INSP.NAME.wrapper.args.missed.message=Argument ''{0}'' missed in ''{1}''
INSP.NAME.wrapper.args.section.missed.message=Section ''{0}'' with args ''{1}'' is missed

# SmkSubworkflowRedeclarationInspection
INSP.NAME.subworkflow.redeclaration=Only last subworkflow with the same name will be executed

# SmkAvoidTabWhitespace
INSP.NAME.codestyle.avoid.whitespace.tab=Tab character detected. PEP-8 recommends to use spaces in Python like code.

# SmkYetUndefinedNameInspection
INSP.NAME.rule.or.checkpoint.name.yet.undefined=Rule or Checkpoint name has not been defined yet
INSP.NAME.rule.or.checkpoint.name.yet.undefined.msg=Rule or Checkpoint name ''{0}'' has not been defined yet

# SmkLocalrulesRuleorderRepeatedRuleInspection
INSP.NAME.localrules.ruleorder.repeated.rule=This rule has already been added to this section.

# SmkLocalRuleNotInFile
INSP.NAME.localrules.ruleorder.confusing.ref=Confusing name, the rule isn''t defined in this file.
INSP.NAME.localrules.ruleorder.confusing.ref.msg=Rule ''{0}'' isn''t defined in this file, not an error but it is confusing.

# SmkLambdaRuleParamsInspection
INSP.NAME.only.specific.lambda.params=Only specific lambda params should be used in this section.
INSP.NAME.only.these.parameters.in.section=Only use ''{0}'' as lambda parameter in ''{1}'' section.
INSP.NAME.only.n.parameters.in.section=Don''t use more than {0} lambda parameter(s) in ''{1}'' section.
INSP.NAME.wildcards.first.parameter='wildcards' has to be the first lambda parameter.
INSP.NAME.wildcards.first.parameter.preferable=Snakemake documentation suggests it's preferable to name the first parameter 'wildcards'.
INSP.NAME.non.wildcards.param.first.parameter=''{0}'' cannot be the first lambda parameter in ''{1}'' section.
INSP.NAME.functions.not.allowed.in.section=Function object cannot be used as a value in ''{0}'' section.

# SmkWildcardNotDefinedInspection
INSP.NAME.wildcard.not.defined.title=Undefined wildcard usage.
INSP.NAME.wildcard.not.defined.in.section=Wildcard ''{0}'' isn''t defined in ''{1}'' section.
INSP.NAME.wildcard.not.defined=Wildcard ''{0}'' isn''t properly defined.
INSP.NAME.wildcard.not.defined.cannot.check=Cannot check whether wildcard ''{0}'' is defined or not.

# SmkNotSameWildcardsSetInspection
INSP.NAME.not.same.wildcards.set.title=Different wildcards sets used 'output', 'log' and 'benchmark' sections.
INSP.NAME.not.same.wildcards.set=Missing wildcards: {0}.
INSP.NAME.not.same.wildcards.set.cannot.check=Cannot check missing wildcards here.

# SmkSLUnresolvedSectionInspection
INSP.NAME.undeclared.section.title=Undeclared rule or checkpoint section.
INSP.NAME.undeclared.section.message=Undeclared section usage: ''{0}''.

# SSmkSLMissingWildcardsAccessorPrefixInspection
INSP.NAME.wildcards.prefix.missing.title=Wildcard access requires 'wildcards.' prefix in this section.
INSP.NAME.wildcards.prefix.missing.message=Wildcard access requires 'wildcards.' prefix in this section.
INSP.INTN.add.wildcards.prefix=Add 'wildcards.' prefix.

# SmkSLSubscriptionIndexOutOfBoundsInspection
INSP.NAME.section.arg.idx.aiobe.title=Section argument index out of bounds.
INSP.NAME.section.arg.idx.aiobe.message=Section index is out of bounds: value should be in 0..{0}.
INSP.NAME.section.arg.idx.aiobe.zero.message=Section index is out of bounds. Only 0 is allowed here.

# SmkSLWildcardNameIsConfusingInspection
INSP.NAME.wildcards.confusing.name.title=Confusing wildcard name.
INSP.NAME.wildcards.confusing.name.like.section.message=Confusing wildcard name: ''{0}''. It looks like section name.
INSP.NAME.wildcards.confusing.name.with.dot.message=Confusing wildcard name: ''{0}'', looks like call chain. Please don''t use dots here.

# SmkRedundantCommaInspection
INSP.NAME.redundant.comma.title=Comma is unnecessary
INSP.NAME.redundant.comma.fix.message=Remove redundant comma

# SmkMisuseUsageIOFlagMethodsInspection
INSP.NAME.misuse.usage.io.flag.methods.title=Correct using methods ancient, protected, directory
INSP.NAME.misuse.usage.io.flag.methods.warning.message=''{0}'' isn''t supported in ''{1}'' section, expected in sections: {2}.

# SmkPyUnboundLocalVariableInspection
INSP.NAME.unbound=Unbound local variable

# PyUnresolvedReferencesInspection
INSP.py.unresolved.ref.rule.like.ref.message=Cannot find rule or checkpoint ''{0}''

### Annotators ###
ANN.keyword.argument.already.provided=Keyword argument already provided: {0}.
ANN.positional.argument.after.keyword.argument=Positional argument after keyword argument.
ANN.multiple.execution.sections=Multiple execution sections, the first is ''{0}''.


## Parsing
PARSE.expected.separator.message=''{0}'' expected
PARSE.expected.ruleorder=Expected a descending order of rule names, e.g. rule1 > rule2 > rule3 ...
PARSE.expected.localrules=Expected a comma separated list of rules that shall not be executed by the cluster command.
PARSE.expected.identifier=identifier expected
PARSE.expected.dedent=Dedent expected
PARSE.expected.indent=Indent expected
PARSE.incorrect.unindent=Unindent does not match any outer indentation level.
PARSE.eof.docstring=Docstring at end of file does not precede any statement

# String language parsing
SMKSL.PARSE.expected.identifier.name=Expected identifier name
SMKSL.PARSE.expected.regexp=Expected regular expression
SMKSL.PARSE.expected.rbrace=Expected '}'
SMKSL.PARSE.expected.rbracket=Expected ']'
SMKSL.PARSE.unexpected.character=Unexpected character
SMKSL.PARSE.expected.key=Expected key
SMKSL.PARSE.expected.comma=Expected ','
SMKSL.PARSE.expected.lbrace=Expected '{'

INSP.NAME.unresolved.subscription.ref=Unresolved key ''{0}''

# Types
TYPES.rule.section.type.text=rule section
TYPES.rule.wildcard.type.text=rule wildcard
TYPES.rule.run.variable.type.text=run section parameter

#######################
# Notifications
notifier.group.title=SnakeCharm Plugin Notifications
notifier.msg.facet.by.snakefile.title=Snakemake framework detected
notifier.msg.facet.by.snakefile.action.configure=Configure Facet...
notifier.msg.facet.by.snakefile=Snakefile was found in ''{0}''.

#######################
# Facet
facet.display.name=Snakemake
facet.configurable.display.name=Snakemake
facet.configurable.enable.support.cb=Enable Snakemake Support
facet.settings.wrappers.title=Snakemake Wrappers Info
facet.settings.wrappers.bundled=Bundled info (vers.: {0})
facet.settings.wrappers.sources=Retrieve from sources
facet.settings.wrappers.sources.path=Folder path
facet.settings.wrappers.sources.path.not.exist=Wrappers path doesn't exist or not readable.
facet.settings.wrappers.sources.path.not.directory=Wrappers path should be a directory.
facet.settings.wrappers.sources.path.chooser=Choose Wrappers Sources Folder
facet.settings.wrappers.sources.help=Use your own wrappers folder or get snakemake wrappers from GitHub. E.g. clone <a href="https://github.com/snakemake/snakemake-wrappers.git">https://github.com/snakemake/snakemake-wrappers.git</a> project or download and unpack <a href="https://github.com/snakemake/snakemake-wrappers/archive/master.zip">https://github.com/snakemake/snakemake-wrappers/archive/master.zip</a>. This setting doesn't affect your pipeline runtime behavior and is only used for SnakeCharm plugin code insight features.

# Wrapper
wrapper.bundled.storage.version=0.64.0
