### Inspections: INSP ###
INSP.snakemake.suppressor.suppress.for.section.argument=Suppress for section argument
INSP.snakemake.suppressor.suppress.for.section=Suppress for section
INSP.snakemake.suppressor.suppress.for.rule.like=Suppress for rule/subworkflow
INSP.GROUP.snakemake=Snakemake

# SnakemakeResourcesUnnamedArgsInspection
INSP.NAME.resources.unnamed.args=Resources have to be named (e.g. 'threads=4').
INSP.INTN.name.argument=Name argument

# SmkUnrecognizedSectionInspection
INSP.NAME.section.unrecognized=Section not recognized by SnakeCharm plugin
INSP.NAME.section.unrecognized.message=Section ''{0}'' isn''t recognized by SnakeCharm plugin or there could be a typo in the section name.
INSP.NAME.section.unrecognized.ignored=Ignored Sections
INSP.NAME.section.unrecognized.ignored.add=Ignore an unrecognized section ''{0}''

# SmkExecutionSubsectionInUseSectionInspection
INSP.NAME.unexpected.execution.section=Execution sections can't be overridden in 'use rule'

# SmkUnusedLogFileInspection
INSP.NAME.unused.log.section=Looks like a log file won't be created, because it is not referenced from 'shell' or 'run' sections
INSP.NAME.unused.log.section.in.special.rule=Looks like a log file won''t be created in rule ''{0}'', because it is not referenced from ''shell'' or ''run'' sections
INSP.INTN.unused.log.fix.add.to.shell.section=Append ''{0}'' to shell section command into ''{1}''
INSP.INTN.unused.log.fix.add.to.run.section=Add ''shell(..)'' call that creates crates a log file in ''run'' section into ''{0}''
INSP.INTN.unused.log.fix.create.shell.section=Add ''shell'' section that creates a log file into ''{0}''

# SnakemakeRuleRedeclarationInspection
INSP.NAME.rule.redeclaration=This rule name is already used by another rule declaration.
INSP.NAME.rule.redeclaration.possible=This rule name is probably used by another rule declaration. Not sure because this rule isn't at file top level.
INSP.NAME.rule.redeclaration.other.file.possible=This rule name is probably used by another rule declaration. Not sure because the usage is in the other file.
INSP.INTN.rename.element=Rename element

# SnakemakeRuleSectionAfterExecutionInspection
INSP.NAME.rule.section.after.execution=No rule sections allowed after execution sections.
INSP.NAME.rule.section.after.execution.message=No rule keywords allowed after ''{0}'' in rule.
INSP.INTN.move.execution.section.down.family=Move execution section to the end of the rule

# SnakemakeShadowSettingsInspection
INSP.NAME.shadow.settings=Shadow must either be 'shallow', 'full', 'minimal', or True (equivalent to 'full').
INSP.NAME.shadow.settings.full=The setting shadow: \"full\" fully shadows the entire subdirectory structure of the current workdir.
INSP.NAME.shadow.settings.minimal=The setting shadow: \"minimal\" only symlinks the inputs to the rule.
INSP.NAME.shadow.settings.shallow=By setting shadow: \"shallow\", the top level files and directories are symlinked, so that any relative paths in a subdirectory will be real paths in the filesystem.

# SmkSectionRedeclarationInspectoin
INSP.NAME.section.redeclaration=Section declaration above overrides this declaration
INSP.NAME.section.redeclaration.message=Declaration of section ''{0}'' above overrides this declaration.
INSP.INTN.remove.section.family=Remove section

#SmkCondaSectionNotAllowedWithRun
INSP.NAME.conda.section.not.allowed.with.run=Conda environments are not allowed with run directive.

#SmkEnvmodulesNotAllowedSectionInspection
INSP.NAME.envmodules.section.not.allowed.with.title=The envmodules directive is not allowed with run
INSP.NAME.envmodules.section.not.allowed.with.run.message=The directive 'envmodules' is only allowed with 'shell', 'script', 'notebook', or 'wrapper' directives (not with run).

# SmkFileEndsWithCommentInspection
INSP.NAME.file.ends.with.comment.title=Last statement in the file is comment
INSP.NAME.file.ends.with.comment.message=Snakemake treats a comment in the end of a file as a syntax error. Please add a whitespace after the comment.
INSP.NAME.file.ends.with.comment.quick.fix=Insert empty line

# SmkSectionMultilineStringArgsInspection.kt
INSP.NAME.section.multiline.string.args=Multiline section string argument
INSP.NAME.section.multiline.string.args.message=Multiline string argument in ''{0}'' will be considered as concatenation. Maybe comma is missing.

# SmkSectionMultipleArgsInspection
INSP.NAME.section.multiple.args=Only one argument is allowed for this section.
INSP.NAME.section.multiple.args.message=Only one argument is allowed for ''{0}'' section.

# SmkSectionUnspecifiedFieldArgsInspection
INSP.NAME.section.unspecified.field.args=Section name is not specified
INSP.NAME.section.unspecified.field.args.message=Expected section name or argument (e.g. ''rules.foo.input'' or ''rules.bar.output.arg1''), but ''{0}'' was found

# SmkSectionDuplicatedArgsInspection
INSP.NAME.section.duplicated.args=Duplicated argument
INSP.NAME.section.duplicated.args.message=This argument has been already added to ''{0}'' section.
INSP.INTN.remove.duplicated.arg=Remove duplicated argument

# SmkSectionUnexpectedCallableArgsInspection
INSP.NAME.section.unexpected.callable.args=Unexpected callable argument
INSP.NAME.section.unexpected.callable.args.message=Section ''{0}'' does not support callable arguments

# SmkSectionUnexpectedKeywordArgsInspection
INSP.NAME.section.unexpected.keyword.args=Unexpected keyword argument
INSP.NAME.section.unexpected.keyword.args.message=Section ''{0}'' does not support keyword arguments

# SmkWrapperMissedArgumentsInspection
INSP.NAME.wrapper.args.missed=Missed wrapper argument
INSP.NAME.wrapper.args.missed.message=Argument ''{0}'' missed in ''{1}''
INSP.NAME.wrapper.args.section.missed.message=Section ''{0}'' is missed
INSP.NAME.wrapper.args.section.with.args.missed.message=Section ''{0}'' with args ''{1}'' is missed

# SmkSubworkflowRedeclarationInspection
INSP.NAME.subworkflow.redeclaration=Only last subworkflow with the same name will be executed

# SmkModuleRedeclarationInspection
INSP.NAME.module.redeclaration=Only last module with the same name will be used

# SmkAvoidTabWhitespace
INSP.NAME.codestyle.avoid.whitespace.tab=Tab character detected. PEP-8 recommends to use spaces in Python like code.

# SmkYetUndefinedNameInspection
INSP.NAME.rule.or.checkpoint.name.yet.undefined=Rule or Checkpoint name has not been defined yet
INSP.NAME.rule.or.checkpoint.name.yet.undefined.msg=Rule or Checkpoint name ''{0}'' has not been defined yet

# SmkLocalrulesRuleorderRepeatedRuleInspection
INSP.NAME.localrules.ruleorder.repeated.rule=This rule has already been added to this section.

# SmkLocalRuleNotInFile
INSP.NAME.localrules.ruleorder.confusing.ref=Confusing name, the rule isn''t defined in this file.
INSP.NAME.localrules.ruleorder.confusing.ref.msg=Rule ''{0}'' isn''t defined in this file, not an error but it is confusing.

# SmkSectionVariableRequiresLambdaAccessInspection
INSP.NAME.section.var.requires.lambda.title=Rule section access requires lambda.
INSP.NAME.section.var.requires.lambda.possible.outer.var.access=Access to outer scope ''{0}'' object with the name similar to snakemake specific variable. To use snakemake ''{0}'' variable, use lambda expression here, e.g. `lambda wildcards, {0}: {0}.foo`.
INSP.NAME.section.var.requires.lambda.possible.outer.wildcards.access=Access to outer scope 'wildcards' object with the name similar to snakemake specific variable. To use snakemake 'wildcards' variable, use lambda expression here, e.g. `lambda wildcards: wildcards.foo`.
INSP.NAME.section.var.requires.lambda.missing.for.var=To access ''{0}'' section use lambda here, e.g. `lambda wildcards, {0}: {0}.foo`.
INSP.NAME.section.var.requires.lambda.missing.for.wildcard=To access 'wildcards' section use lambda here, e.g. `lambda wildcards: wildcards.foo`.
INSP.NAME.section.var.requires.lambda.unsupported.var.message=Snakemake variable ''{0}'' cannot be used in ''{1}'' directly or using lambdas.

# SmkSeveralRulesAreOverriddenAsOneInspection
INSP.NAME.only.last.rule.will.be.overridden.list.case=Multiple rules in 'use rule' statement but name modification ('as' statement) does not contain a wildcard '*'.
INSP.NAME.only.last.rule.will.be.overridden.pattern.case=Name pattern is missed. Only the last rule will be overridden.
INSP.NAME.only.last.rule.will.be.overridden.fix=Append '_*' pattern in the end of name definition.

# SmkLambdaRuleParamsInspection
INSP.NAME.only.specific.lambda.params=Only specific lambda params should be used in this section.
INSP.NAME.only.these.parameters.in.section=Only use ''{0}'' as lambda parameter in ''{1}'' section.
INSP.NAME.only.n.parameters.in.section=Don''t use more than {0} lambda parameter(s) in ''{1}'' section.
INSP.NAME.wildcards.first.parameter='wildcards' has to be the first lambda parameter.
INSP.NAME.wildcards.first.parameter.preferable=Snakemake documentation suggests it's preferable to name the first parameter 'wildcards'.
INSP.NAME.non.wildcards.param.first.parameter=''{0}'' cannot be the first lambda parameter in ''{1}'' section.
INSP.NAME.functions.not.allowed.in.section=Function object cannot be used as a value in ''{0}'' section.

# SmkWildcardNotDefinedInspection
INSP.NAME.wildcard.not.defined.title=Undefined wildcard usage.
INSP.NAME.wildcard.not.defined.in.section=Wildcard ''{0}'' isn''t defined in ''{1}'' section.
INSP.NAME.wildcard.not.defined=Wildcard ''{0}'' isn''t properly defined.
INSP.NAME.wildcard.not.defined.cannot.check=Cannot check whether wildcard ''{0}'' is defined or not.

# SmkNotSameWildcardsSetInspection
INSP.NAME.not.same.wildcards.set.title=Different wildcards sets used 'output', 'log' and 'benchmark' sections.
INSP.NAME.not.same.wildcards.set=Missing wildcards: {0}.
INSP.NAME.not.same.wildcards.set.cannot.check=Cannot check missing wildcards here.

# SmkSLUnresolvedSectionInspection
INSP.NAME.undeclared.section.title=Undeclared rule or checkpoint section.
INSP.NAME.undeclared.section.message=Undeclared section usage: ''{0}''.

# SmkSLMissingWildcardsAccessorPrefixInspection
INSP.NAME.wildcards.prefix.missing.title=Wildcard access requires 'wildcards.' prefix in this section.
INSP.NAME.wildcards.prefix.missing.message=Wildcard access requires 'wildcards.' prefix in this section.
INSP.INTN.add.wildcards.prefix=Add 'wildcards.' prefix.

# SmkSLQuotingMisuseInGetAccessorInspection
INSP.NAME.quoting.misuse.in.get.title=Key quoting isn't expected in Snakemake string language get accessor.
INSP.NAME.quoting.misuse.in.get.message=Key quoting isn't expected in Snakemake string language get accessor.
INSP.NAME.quoting.misuse.in.get.fix=Unquote key

# SmkSLSubscriptionIndexOutOfBoundsInspection
INSP.NAME.section.arg.idx.aiobe.title=Section argument index out of bounds.
INSP.NAME.section.arg.idx.aiobe.message=Section index is out of bounds: value should be in 0..{0}.
INSP.NAME.section.arg.idx.aiobe.zero.message=Section index is out of bounds. Only 0 is allowed here.

# SmkSLWildcardNameIsConfusingInspection
INSP.NAME.wildcards.confusing.name.title=Confusing wildcard name.
INSP.NAME.wildcards.confusing.name.like.section.message=Confusing wildcard name: ''{0}''. It looks like section name.
INSP.NAME.wildcards.confusing.name.with.dot.message=Confusing wildcard name: ''{0}'', looks like call chain. Please don''t use dots here.

# SmkRedundantCommaInspection
INSP.NAME.redundant.comma.title=Comma is unnecessary
INSP.NAME.redundant.comma.fix.message=Remove redundant comma

# SmkMisuseUsageIOFlagMethodsInspection
INSP.NAME.misuse.usage.io.flag.methods.title=Correct using methods ancient, protected, directory
INSP.NAME.misuse.usage.io.flag.methods.warning.message=''{0}'' isn''t supported in ''{1}'' section, expected in sections: {2}.

# SmkMultilineFunctionCallInspection
INSP.NAME.multiline.func.call=Invalid function call. Rewrite section as multiline or rewrite function using a single line
INSP.NAME.multiline.func.call.fix= Rewrite section as multiline

#SmkUnresolvedImportedRuleNameInspection
INSP.NAME.probably.unresolved.use.reference=Cannot check rule names imported from remote modules

# SmkPyUnboundLocalVariableInspection
INSP.NAME.unbound=Unbound local variable

# PyUnresolvedReferencesInspection
INSP.py.unresolved.ref.rule.like.ref.message=Cannot find rule or checkpoint ''{0}''

### Annotators ###
ANN.keyword.argument.already.provided=Keyword argument already provided: {0}.
ANN.positional.argument.after.keyword.argument=Positional argument after keyword argument.
ANN.multiple.execution.sections=Multiple execution sections, the first is ''{0}''.


## Parsing
PARSE.expected.separator.message=''{0}'' expected
PARSE.expected.ruleorder=Expected a descending order of rule names, e.g. rule1 > rule2 > rule3 ...
PARSE.expected.localrules=Expected a comma separated list of rules that shall not be executed by the cluster command.
PARSE.expected.identifier=identifier expected
PARSE.expected.dedent=Dedent expected
PARSE.expected.indent=Indent expected
PARSE.incorrect.unindent=Unindent does not match any outer indentation level.
PARSE.eof.docstring=Docstring at end of file does not precede any statement
PARSE.rule.expected.rule.commend.to.docstring=Expecting rule keyword, comment or docstrings inside a rule definition.
PARSE.use.with.not.allowed=Keyword 'with' in 'use rule' statement is not allowed in combination with rule pattern '*'
PARSE.use.double.mult.sign=Expecting rulename modifying pattern (e.g. modulename_*) after 'as' keyword
PARSE.use.rule.keyword.expected=Expecting keyword 'rule' after keyword 'use'
PARSE.use.names.expected=Expecting '*', rule name, or rule listing (comma separated) after 'use rule' statement
PARSE.use.few.names.from.current.module='use rule' statement from rule in the same module must declare a single rule but multiple rules are declared
PARSE.use.unexpected.names.separator=Unexpected token in comma separated list of rules within 'use rule' statement
PARSE.use.wildcard.in.names.list=Wildcard '*' can't be used with rules names List
PARSE.use.unexpected.list.ending=Expecting list of rules in 'use rule' statement to end with keyword 'from'
PARSE.use.expecting.module.name=Expecting module name after 'from' keyword in 'use rule' statement
PARSE.use.with.missed=':' can be placed only after 'with' keyword, which is missed
PARSE.use.expecting.colon=Expecting colon after 'with' keyword in 'use rule' statement
PARSE.use.args.sections.forbidden=Redeclaration of imported rules is forbidden for wildcard '*'
PARSE.use.as.or.with.expecting=Expecting either 'as', 'with' or end of line in 'use rule' statement
PARSE.use.with.expecting=Expecting 'with:' at the end of 'use rule' declaration but before arguments sections


# String language parsing
SMKSL.PARSE.expected.identifier.name=Expected identifier name
SMKSL.PARSE.expected.regexp=Expected regular expression
SMKSL.PARSE.expected.rbrace=Expected '}'
SMKSL.PARSE.expected.rbracket=Expected ']'
SMKSL.PARSE.unexpected.character=Unexpected character
SMKSL.PARSE.expected.key=Expected key
SMKSL.PARSE.expected.comma=Expected ','
SMKSL.PARSE.expected.lbrace=Expected '{'

INSP.NAME.unresolved.subscription.ref=Unresolved key ''{0}''

# Types
TYPES.rule.section.type.text=rule section
TYPES.rule.wildcard.type.text=rule wildcard
TYPES.rule.section.arg.type.text=section argument
TYPES.rule.section.arg.keyword.unknown.section.type.text=section keyword arg
TYPES.rule.section.arg.keyword.type.text=''{0}:'' keyword arg
TYPES.rule.section.arg.index.no.section.type.text=section position arg
TYPES.rule.section.arg.index.type.text=''{0}:'' position arg
TYPES.rule.run.variable.type.text=run section parameter
TYPES.rule.run.workflow.globals.type.text=snakefile globals

# Formatter
snakemake.settings.name=Snakemake
snakemake.settings.blank.lines.around.rulelike=Around rules/checkpoints/subworkflows
snakemake.settings.wrapping.and.braces.align.multiline.params.in.calls=Align multiline arguments in sections

#######################
# Notifications
notifier.group.title=SnakeCharm plugin notifications
notifier.msg.framework.by.snakefile.title=Snakemake framework detected
notifier.msg.framework.by.snakefile.action.configure=Configure Framework...
notifier.msg.framework.by.snakefile=Snakefile was found in ''{0}''.

#######################
# Banner
BANNER.msg=Snakemake support is disabled. Not all features are available.
BANNER.hide=Hide notification
BANNER.dont.show.again=Don't show again

#######################
# Facet
smk.framework.display.name=Snakemake
smk.framework.configurable.display.name=Snakemake
smk.framework.configurable.enable.support.cb=Enable Snakemake Support
smk.framework.configurable.panel.wrappers.title=Snakemake Wrappers Info
smk.framework.configurable.panel.wrappers.bundled=Bundled info (vers.: {0})
smk.framework.configurable.panel.wrappers.sources=Retrieve from sources
smk.framework.configurable.panel.wrappers.sources.path=Folder path
smk.framework.configurable.panel.wrappers.sources.path.not.exist=Wrappers folder path doesn't exist or not readable.
smk.framework.configurable.panel.wrappers.sources.path.is.blank=Wrappers folder path is blank, please specify an existing folder.
smk.framework.configurable.panel.wrappers.sources.path.not.directory=Wrappers folder path should be a directory.
smk.framework.configurable.panel.wrappers.sources.path.chooser=Choose Wrappers Sources Folder
smk.framework.configurable.panel.wrappers.sources.help=Use your own wrappers folder or get snakemake wrappers from GitHub. E.g. clone <a href="https://github.com/snakemake/snakemake-wrappers.git">https://github.com/snakemake/snakemake-wrappers.git</a> project or download and unpack <a href="https://github.com/snakemake/snakemake-wrappers/archive/master.zip">https://github.com/snakemake/snakemake-wrappers/archive/master.zip</a>. This setting doesn't affect your pipeline runtime behavior and is only used for SnakeCharm plugin code insight features.
smk.framework.configurable.panel.sdk.project.not.valid=Default project interpreter isn't a Python interpreter.
smk.framework.configurable.panel.sdk.not.valid=''{0}'' interpreter isn't a Python interpreter.
smk.framework.detector.added.to.module=Snakemake support will be enabled for the project.

# Wrapper
wrappers.parsing.progress.collecting.data=Loading or collecting snakemake wrappers info
smk.framework.configurable.panel.sdk=Python Interpreter
smk.framework.configurable.panel.sdk.hint=Select Python interpreter with snakemake module installed.This setting doesn't affect your pipeline runtime behavior and is only used for SnakeCharm plugin code insight features.

#######################
# Color settings
smk.color.keyword=Keyword
smk.color.definition=Name definition
smk.color.subsection=Subsection
smk.color.run=Run section
smk.color.keyword.arg=Keyword argument
smk.color.string.text=String//Text
smk.color.string.tqs=String//Triple quoted string
smk.color.string.SL.content=String//SnakemakeSL//String content
smk.color.string.SL.braces=String//SnakemakeSL//Braces
smk.color.string.SL.comma=String//SnakemakeSL//Comma
smk.color.string.SL.format=String//SnakemakeSL//Format specifier
smk.color.string.SL.key=String//SnakemakeSL//Access key
smk.color.string.SL.reference=String//SnakemakeSL//Reference
smk.color.string.SL.wildcard=String//SnakemakeSL//Wildcard