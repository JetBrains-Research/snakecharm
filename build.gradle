buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    // This plugin allows you to build plugins for IntelliJ platform using specific
    // IntelliJ SDK and bundled plugins.
    // See https://github.com/JetBrains/gradle-intellij-plugin
    id 'org.jetbrains.intellij' version '0.4.8'

    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
}

apply plugin: 'java'
apply plugin: 'kotlin'

def hasPyCharm = project.hasProperty('pycharmPath')
def hasPythonPlugin = project.hasProperty('pythonPlugin')

version '0.3.SNAPSHOT'

intellij {
    pluginName 'snakecharm'
    version ideaVersion
    sandboxDirectory = "${project.rootDir}/.sandbox"
    ideaDependencyCachePath  = "${project.rootDir}/.idea_distrib_cache"
    updateSinceUntilBuild false

    plugins = []
    if (hasPyCharm) {
            alternativeIdePath pycharmPath
        }
        else if (hasPythonPlugin) {
            plugins += [pythonPlugin]
        }
        else {
            throw new StopActionException("Define either pycharmPath or pythonPlugin in your gradle.properties")
        }

    instrumentCode Boolean.valueOf(instrumentPluginCode)
    downloadSources Boolean.valueOf(downloadIdeaSources)
    // intellijRepo = "https://www.jetbrains.com/intellij-repository"
}

publishPlugin {
    channels publishChannels.split(',')
    token findProperty('intellijPublishToken') ?: 'no_token_given'
}

patchPluginXml {
    // Use change notes on github
    //changeNotes """ """
    sinceBuild "183.4284.36"
    untilBuild "191.*"
}

sourceCompatibility = javaVersion
targetCompatibility = sourceCompatibility
compileKotlin { kotlinOptions.jvmTarget = sourceCompatibility }
compileTestKotlin { kotlinOptions.jvmTarget = sourceCompatibility }

repositories {
    mavenCentral()
    if (hasPyCharm) {
        flatDir {
            dirs "$pycharmPath/lib"
        }
    }
}

dependencies {
    if (hasPyCharm) {
        compileOnly name: 'pycharm'
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile 'log4j:log4j:1.2.17'

    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test"

//    testImplementation 'io.cucumber:cucumber-java:4.2.6'
//    testImplementation 'io.cucumber:cucumber-junit:4.2.6'
    testImplementation 'info.cukes:cucumber-java:1.2.4'
    testImplementation 'info.cukes:cucumber-junit:1.2.4'
}

task cucumber() {
    dependsOn assemble, compileTestKotlin
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"

            classpath =  project.sourceSets.test.runtimeClasspath

            // for cucumber 4.2.6: remove old version from classpath, it is there from idea platform dependency
//            classpath =  project.sourceSets.test.runtimeClasspath.filter {
//                 it.parentFile.name != "lib" || !it.name.startsWith("cucumber-")
//            }
            args = ['--plugin', 'pretty', '--glue', 'hellocucumber', 'src/test/resources']
        }
    }
}


test {
    include '**/*RunCucumberTest.class'
    classpath = project.sourceSets.test.runtimeClasspath.filter {
        it.parentFile.name != "lib" || !it.name.startsWith("cucumber-")
    }

}

wrapper {
    gradleVersion = '5.4'
    distributionUrl = "https://cache-redirector.jetbrains.com/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}