SnakeCharm Changelog
====================

Here you can see the full list of changes between each big release.

Version 0.8.1 build #0.8.1.xxx
-------------
Released on ...

Features:
- Inspection: Warn users if they have arguments with same value in section (see #263)
- Inspection: Comma in the end of section arg list isn't needed (see #255)


Version 0.8.0 build #0.8.0.214
-------------
Released on July 3th 2020

Features:
- PyCharm 2020.2 builds compatibility


Version 0.7.0 build #0.7.0.209
-------------
Released on July 2th 2020

Features:
- Inspection: warn about confusing reference in localrules section (see #287)
- Inspection: Warn if mixed tabs and spaces (see #285)
- 'notebook' section parsing error (see #288)
- `envvars` isn't parsed properly (see #281)
- `container` top level and rule sections parsing (#291)
- Resolve/completion for paths in notebook section (see #289)
- Inspection: Conda environments are only allowed with shell, script, notebook,
    or wrapper directives (not with run). #290

Fixed:
- Rule not yet defined false positive for lambdas (see #286)
- Unresolved reference for 'rule' in 'run' section (see #283)
- Doesn't automatically create folding code element for "checkpoint" (see #273)
- Multiline shell commands in anonymous rules defined in loops (see #275)
- Do not warn about missing wildcards if no SmkSL injection in string (see #266)

Version 0.6.0 build #0.6.0.165
-------------
Released on April 12th 2019

Fixed:
- 2020.1 Compatibility (see #279)
- “cache:” rule section support (see #280)

Version 0.5.2 build #0.5.2.126
-------------
Released on November 26th 2019

Fixed:
- UnsupportedOperationException (see #271)

Version 0.5.2 build #0.5.2.124
-------------
Released on November 26th 2019

Minor update compatible with 2019.3 builds

Fixed:
- 2019.2 Deprecated API cleanup (see #219)
- PluginException: While loading class SnakemakeVisitorFilter (see #270)
- PsiInvalidElementAccessException: PyUnboundLocalVariableInspection (see #268)


Version 0.5.1 build #0.5.1.126
-------------
Released on November 26th 2019

Minor update which corrects untilBuild, this plugin version isn't compatible with 2019.3 EAP / RC.

Fixed:
- SnakeCharm is not compatible with AppCode (see #269)


Version 0.5 build #0.5.112.2018.3  (removed from plugins repo)
-------------
Released on November 20th 2019
- sinceBuild "183.4284" (2018.3)
- untilBuild "193.*" (2019.3)

This is a major update which includes two major features:
* Wildcards support with syntax highlighting, code completion, resolve, find usages,
    rename and various useful inspections
* Internal code parser and lexer updated to support multiline strings and removes wrong
    errors highlighting in many places

To get all features enabled please configure in your project Python interpreter with snakemake
module installed. Otherwise some smart code insight features will not work.

Special thanks to our contributors Sharkova Darya and Nazarov Nikita. Without them this major plugin
update won't be possible.

Code completion / Resolve Features:
- SnakemakeSL language: implement basic type inference & resolve/completion engine, see #183
- Completion/Resolve for wildcards, output, input in lambdas, see #230
- Includes links resolve and completion, see #20
- File reference support for `conda` section, see #144
- In rules/checkpoint completion: show all names only on 2nd auto-completion invocaton, see #173
- ruleorder, localrules should resolve/complete not only rules from same file,
    but all rules from project, see #155
- Completion in 'run:' section for input/output/log/resources/wildcards/params keys, #237
- Python variables completion in SmkSL injections, #213
- Resolve / completion for indexes in subscription expressions, e.g. output[1], #243
- Show all project rules/checkpoints in autocompletion, #120
- 'shell' section & call: resolve & completion for input args, #152
- Resolve completion for `input.foo` in lambda functions, #154
- Resolve/Completion for: input, output, params rule options in shell argument, #3


Inspections:
- Support highlighting for arguments of format strings, see #53
- Duplicated keyword arguments, see #72
- Multiple arguments inspection doesn't work for several keywords, see #159
- Inspection quick fixes, see #194
- False position arg after keyword arg inspection warning, see #210
- Highlight wildcard name after `wildcards.foo` same as in injection '{foo}', see #227
- Inspection: warn if wildcards set is different in input, output, log, message and
 other required sections (check snakemake sources & runtime behaviour), see #207
- Inspections for identifier names in SnakemakeSL, #215
- Inspection for unavailable rule sections in SnakemakeSL, #199
- Inspection: warn if wildcard name is same as section name, #244
- Warn about section argument index out of bounds exception , #245
- Warn if lambda argument isn't supported for the section, #141
- Inspection: SyntaxRuntime Error: Only input files can be specified as functions, #156
- Warn if user uses dot in wildcards names, it is confusing, #265
- Highlight wildcards in python code, #264
- Inspection: wildcards in shell script can be used only with `wildcards.` prefix., #56


Find Usages / Rename:
- For rule sections and wildcards, #233
- For rules, checkpoints

Other:
- Determine wildcard names for rule, see #184
- Multiline string syntax error not reported, see #146
- Implemented brace matcher for SmkString injection language, see #181
- Inject Snakemake format language in strings concatenated by `+`, see #189
- Do not inject SmkSl in rule parameter lambda functions, see #204
- Do not inject SmkSL in f-strings without { or } in string part, see #201
- Lambda expression cannot be used in some rule section, see #187
- Parsing of python format specifiers, see #214
- Inject SmkSL in os.path.join() args, #228
- Don't detect wildcards in snakemake expand() method, #229
- Don't resolve/complete rule like names when not part of 'rules.' or 'checkpoints.' reference, #223
- Do not collect rule wildcards from lambdas, #249

Fixed:
- Parsing error for rules after certain Python statements, see #130
- Top level workflow sections issue, see #179
- F-strings parsing errors in onstart section, see #200
- Wrong completion list after rules./checkpoints., see #211
- Ignore rule redeclaration in conditional statements, #241
- Do not warn: Parameter 'cmd' unfilled in 'shell', #242
- Cannot find reference 'get' in section, #234
- No warning if rule name already used in other file, #253

Version 0.4 build #46
-------------
Released on August 7th 2019
- sinceBuild "183.4284" (2018.3)
- untilBuild "192.*" (2019.2)

Fixed:
- NoSuchMethodException: com.jetbrains.python.parsing.ExpressionParsing.parseFormattedStringNode()
    when using PyCharm Professional or IntelliJ IDEA Ultimate, see #168 (thanks to @winni2k)

Version 0.4 build #42
-------------
Released on July 30th 2019
- sinceBuild "183.4284" (2018.3)
- untilBuild "192.*" (2019.2)

Features:
-  Resolve/Completion for paths in after "include:", see #20

Fixed:
- Minor bug fixes


Version 0.4 build #35
-------------
Released on July 25th 2019
- sinceBuild "183.4284" (2018.3)
- untilBuild "192.*" (2019.2)

Features:
- Completion for `shadow` level values, see #12
- Shadow settings documentation popup, see #73
- Code completion for subworkflow sections names, see #11
- Resolve/Completion for subworflows names, see #60
- Subworkflows support, see #90
- Snakecharm incompatible with current PyCharm version, see #143
- Support method lines separators for snakemake rules, see #149

- Inspection: `shadow` level values, see #65
- Inspection: trailing comma at the end of Snakefile major parsing, see #58
- Inspection: Multiple declarations of the same section inspections, see #71
- Inspection: Keyword arguments duplication inspections, see #72
- Inspection: Subworflow redeclaration, see #88
- Inspection: subworkflow 'workdir', 'snakefile', 'configfile' could accept only single arg, see #83
- Inspection: Warn if rule mentioned more than 1 time in ruleorder / localrule, see #107

Fixed:
- NoClassDefFoundError: com/intellij/psi/util/PsiTreeUtilKt, see #70
- Rule docstrings trigger a syntax error, see #31
- ClassCastException: kotlin.jvm.internal.ClassReference cannot be cast to
 kotlin.jvm.internal.ClassBasedDeclarationContainer, see #68
- 'input' section name autocompletion results in ": input" insertion, see #69
- Subworkflow parsing errors major parsing subtask, see #66
- Parsing error when new line begins with a separator in argument list, see #96
- Multiline strings declaration support, see #16

Version 0.3.2018.3
-------------
Released on June 23th 2019 (eap channel)
- sinceBuild "183.4284"
- untilBuild "191.*"

Features:
- Completion/resolve for methods like 'touch', 'expand', etc., also `rules`, `config` objects, see #1
- Completion/resolve for rules names after 'rules.'

Code inspections:
- Multiple run or shell keywords inspections, #48
- A rule name is already used by another rule, #17
- A positional argument follows a keyword argument
- No rule keywords allowed after run/shell/script/wrapper/cwl in rule foo.', #37

Version 0.2.2018.3
-------------
Released on Feb 4th 2019
- sinceBuild "183.4284"
- untilBuild "191.*"
    
Fixed:
- *.smk file not recognized as Snakemake files, see issue #28
- *.rules files support, see issue #21
- Do not parse/highlight as keywords several top level workflow params, see issue #29
- Improved code indentation in rules, no line continuation is inserted, but indentation
  is relative to ':', see issue #26
- Rules and rule params folding support #15