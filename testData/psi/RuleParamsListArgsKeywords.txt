SnakemakeFile: RuleParamsListArgsKeywords.smk
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('foo1')
    PsiElement(Py:COLON)(':')
    PyStatementList
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: iii
            PsiElement(Py:SINGLE_QUOTED_STRING)('"iii"')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('output')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: ooo
            PsiElement(Py:SINGLE_QUOTED_STRING)('"ooo"')
      PsiWhiteSpace('\n\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('params')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: ppp
            PsiElement(Py:SINGLE_QUOTED_STRING)('"ppp"')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('log')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: logs/abc.log
            PsiElement(Py:SINGLE_QUOTED_STRING)('"logs/abc.log"')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('resources')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n      ')
          PyKeywordArgumentImpl: mem_mb
            PsiElement(Py:IDENTIFIER)('mem_mb')
            PsiElement(Py:EQ)('=')
            PyNumericLiteralExpression
              PsiElement(Py:INTEGER_LITERAL)('100')
      PsiWhiteSpace('\n\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('threads')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyNumericLiteralExpression
            PsiElement(Py:INTEGER_LITERAL)('50')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('priority')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyNumericLiteralExpression
            PsiElement(Py:INTEGER_LITERAL)('50')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('version')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: 1.0
            PsiElement(Py:SINGLE_QUOTED_STRING)('"1.0"')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('message')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: Executing somecommand with {threads} threads on the following files {input}.
            PsiElement(Py:SINGLE_QUOTED_STRING)('"Executing somecommand with {threads} threads on the following files {input}."')
      PsiWhiteSpace('\n\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('conda')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n        ')
          PyStringLiteralExpression: envs/ggplot.yaml
            PsiElement(Py:SINGLE_QUOTED_STRING)('"envs/ggplot.yaml"')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('benchmark')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n         ')
          PyCallExpression: repeat
            PyReferenceExpression: repeat
              PsiElement(Py:IDENTIFIER)('repeat')
            PyArgumentList
              PsiElement(Py:LPAR)('(')
              PyStringLiteralExpression: benchmarks/somecommand/{sample}.tsv
                PsiElement(Py:SINGLE_QUOTED_STRING)('"benchmarks/somecommand/{sample}.tsv"')
              PsiElement(Py:COMMA)(',')
              PsiWhiteSpace(' ')
              PyNumericLiteralExpression
                PsiElement(Py:INTEGER_LITERAL)('3')
              PsiElement(Py:RPAR)(')')
      PsiWhiteSpace('\n\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('group')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: mygroup
            PsiElement(Py:SINGLE_QUOTED_STRING)('"mygroup"')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('shadow')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyStringLiteralExpression: shallow
            PsiElement(Py:SINGLE_QUOTED_STRING)('"shallow"')
      PsiWhiteSpace('\n\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('singularity')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n        ')
          PyStringLiteralExpression: docker://continuumio/miniconda3:4.4.10
            PsiElement(Py:SINGLE_QUOTED_STRING)('"docker://continuumio/miniconda3:4.4.10"')
      PsiWhiteSpace('\n\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('wildcard_constraints')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n          ')
          PyKeywordArgumentImpl: dataset
            PsiElement(Py:IDENTIFIER)('dataset')
            PsiElement(Py:EQ)('=')
            PyStringLiteralExpression: \d+
              PsiElement(Py:SINGLE_QUOTED_STRING)('"\d+"')
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('shell')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n          ')
          PyStringLiteralExpression: somecommand --group {wildcards.group}  < {input}  > {output}
            PsiElement(Py:SINGLE_QUOTED_STRING)('"somecommand --group {wildcards.group}  < {input}  > {output}"')
  PsiWhiteSpace('\n\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('foo2')
    PsiElement(Py:COLON)(':')
    PyStatementList
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('wrapper')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n      ')
          PyStringLiteralExpression: 0.15.3/bio/bwa/mem
            PsiElement(Py:SINGLE_QUOTED_STRING)('"0.15.3/bio/bwa/mem"')
  PsiWhiteSpace('\n\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('foo3')
    PsiElement(Py:COLON)(':')
    PyStatementList
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('script')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n      ')
          PyStringLiteralExpression: path/to/script.py
            PsiElement(Py:SINGLE_QUOTED_STRING)('"path/to/script.py"')
  PsiWhiteSpace('\n\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('foo4')
    PsiElement(Py:COLON)(':')
    PyStatementList
      PsiWhiteSpace('\n  ')
      SmkRuleOrCheckpointArgsSection
        PsiElement(Py:IDENTIFIER)('cwl')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace('\n        ')
          PyStringLiteralExpression: https://github.com/common-workflow-language/workflows/blob/fb406c95/tools/samtools-sort.cwl
            PsiElement(Py:SINGLE_QUOTED_STRING)('"https://github.com/common-workflow-language/workflows/blob/fb406c95/tools/samtools-sort.cwl"')