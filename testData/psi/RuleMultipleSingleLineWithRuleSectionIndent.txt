SnakemakeFile: RuleMultipleSingleLineWithRuleSectionIndent.smk
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all1')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: foo1
            PsiElement(Py:IDENTIFIER)('foo1')
          PsiElement(Py:COMMA)(',')
          PsiWhiteSpace('\n                          ')
          PyReferenceExpression: foo0
            PsiElement(Py:IDENTIFIER)('foo0')
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all2')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: foo1
            PsiElement(Py:IDENTIFIER)('foo1')
          PsiWhiteSpace('\n                          ')
          PsiElement(Py:COMMA)(',')
          PyReferenceExpression: foo0
            PsiElement(Py:IDENTIFIER)('foo0')
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all3')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: foo1
            PsiElement(Py:IDENTIFIER)('foo1')
          PsiElement(Py:COMMA)(',')
          PsiWhiteSpace('\n                          ')
          PyReferenceExpression: foo0
            PsiElement(Py:IDENTIFIER)('foo0')
          PsiElement(Py:COMMA)(',')
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all4')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: foo1
            PsiElement(Py:IDENTIFIER)('foo1')
          PsiWhiteSpace('\n                          ')
          PsiErrorElement:',' expected
            PsiElement(Py:IDENTIFIER)('foo0')
          PsiErrorElement:expression expected
            <empty list>
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all5')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: rule
            PsiElement(Py:IDENTIFIER)('rule')
          PsiElement(Py:COMMA)(',')
          PsiWhiteSpace('\n                          ')
          PyReferenceExpression: rule
            PsiElement(Py:IDENTIFIER)('rule')
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all6')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: rule
            PsiElement(Py:IDENTIFIER)('rule')
          PsiWhiteSpace('\n                          ')
          PsiElement(Py:COMMA)(',')
          PyReferenceExpression: rule
            PsiElement(Py:IDENTIFIER)('rule')
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all7')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: rule
            PsiElement(Py:IDENTIFIER)('rule')
          PsiElement(Py:COMMA)(',')
          PsiWhiteSpace('\n                          ')
          PyReferenceExpression: rule
            PsiElement(Py:IDENTIFIER)('rule')
          PsiElement(Py:COMMA)(',')
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all8')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: rule
            PsiElement(Py:IDENTIFIER)('rule')
          PsiWhiteSpace('\n                          ')
          PsiErrorElement:',' expected
            PsiElement(Py:IDENTIFIER)('rule')
          PsiErrorElement:expression expected
            <empty list>
  PsiWhiteSpace('\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all9')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: foo1
            PsiElement(Py:IDENTIFIER)('foo1')
          PsiElement(Py:COMMA)(',')
          PsiWhiteSpace('\n                          ')
          PyReferenceExpression: foo0
            PsiElement(Py:IDENTIFIER)('foo0')
  PsiWhiteSpace('\n')
  PyExpressionStatement
    PyBinaryExpression
      PyNumericLiteralExpression
        PsiElement(Py:INTEGER_LITERAL)('5')
      PsiWhiteSpace(' ')
      PsiElement(Py:PLUS)('+')
      PsiWhiteSpace(' ')
      PyNumericLiteralExpression
        PsiElement(Py:INTEGER_LITERAL)('5')
  PsiWhiteSpace('\n\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all10')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: foo1
            PsiElement(Py:IDENTIFIER)('foo1')
          PsiElement(Py:COMMA)(',')
          PsiWhiteSpace('\n                          ')
          PyReferenceExpression: foo0
            PsiElement(Py:IDENTIFIER)('foo0')
  PsiWhiteSpace('\n')
  SMKWorkflowPythonBlockParameter
    PsiElement(Py:WORKFLOW_ONSUCCESS_KEYWORD)('onsuccess')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace('\n    ')
    PyStatementList
      PyAssignmentStatement
        PyTargetExpression: foo
          PsiElement(Py:IDENTIFIER)('foo')
        PsiWhiteSpace(' ')
        PsiElement(Py:EQ)('=')
        PsiWhiteSpace(' ')
        PyNumericLiteralExpression
          PsiElement(Py:INTEGER_LITERAL)('2')
  PsiWhiteSpace('\n\n')
  SmkRule
    PsiElement(Py:RULE_KEYWORD)('rule')
    PsiWhiteSpace(' ')
    PsiElement(Py:IDENTIFIER)('all11')
    PsiElement(Py:COLON)(':')
    PsiWhiteSpace(' ')
    PyStatementList
      SmkRuleArgsSection
        PsiElement(Py:IDENTIFIER)('input')
        PyArgumentList
          PsiElement(Py:COLON)(':')
          PsiWhiteSpace(' ')
          PyReferenceExpression: foo1
            PsiElement(Py:IDENTIFIER)('foo1')
          PsiElement(Py:COMMA)(',')
          PsiWhiteSpace('\n                          ')
          PyReferenceExpression: foo0
            PsiElement(Py:IDENTIFIER)('foo0')
  PsiWhiteSpace('\n')
  SmkWorkflowArgsSection
    PsiElement(Py:WORKFLOW_WILDCARD_CONSTRAINTS_KEYWORD)('wildcard_constraints')
    PyArgumentList
      PsiElement(Py:COLON)(':')
      PsiWhiteSpace('\n    ')
      PyKeywordArgumentImpl: dataset
        PsiElement(Py:IDENTIFIER)('dataset')
        PsiElement(Py:EQ)('=')
        PyStringLiteralExpression: \d+
          PsiElement(Py:SINGLE_QUOTED_STRING)('"\d+"')